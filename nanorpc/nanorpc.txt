1.echo.proto
/ Specs for Echo
option cc_generic_services = true;
package echo;

message EchoRequest
{
  required string message = 1;
};

message EchoResponse
{
  required string response = 1;
};

service EchoService
{
  rpc Echo1(EchoRequest) returns (EchoResponse);
  rpc Echo2(EchoRequest) returns (EchoResponse);
};

2.EchoServer.cc
class EchoServiceImpl : public echo::EchoService {
public:
    EchoServiceImpl() {};

    virtual void Echo1(::google::protobuf::RpcController* controller,
                       const ::echo::EchoRequest* request,
                       ::echo::EchoResponse* response,
                       ::google::protobuf::Closure* done) {
        std::cerr << "Received1: " << request->message().c_str() << std::endl;
        response->set_response(std::string("You sent1: ") + request->message());
        if (done) {
            done->Run();
        }
    }
};


main
--nrpc::RpcServer::RegisterService
----EchoService::GetDescriptor//xxx
------protobuf_AssignDescriptorsOnce//xxx
--------::google::protobuf::GoogleOnceInit//yyy
----EchoService::GetRequestPrototype//xxx
------EchoRequest::default_instance//xxx
--------protobuf_AddDesc_echo_2eproto//xxx
--------::google::protobuf::DescriptorPool::InternalAddGeneratedFile//yy
--------::google::protobuf::MessageFactory::InternalRegisterGeneratedFile//yy
--------EchoRequest::default_instance_ = new EchoRequest()
--------EchoResponse::default_instance_ = new EchoResponse();
--------EchoRequest::InitAsDefaultInstance//xxx
--------EchoResponse::InitAsDefaultInstance
--------::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_echo_2eproto);//yy
----------protobuf_ShutdownFile_echo_2eproto//xx
----EchoService::GetResponsePrototype
------EchoResponse::default_instance
--------protobuf_AddDesc_echo_2eproto
----RpcMethod *rpc_method = new RpcMethod(service, request, response, method);
----rpc_method_map_[hash] = rpc_method;//rpc_method_map
--nrpc::RpcServer::Start
----memcpy((char*)(&opcode), buf, sizeof(opcode));//parse op_code
----rpc_method_map_.find(opcode);//get rpc method
----request->ParseFromString//yy
----EchoService::CallMethod
------EchoServiceImpl.Echo1
----response->SerializeToArray
----sock.send//client



3.EchoClient.cc
main
--nrpc::RpcChannel rpc_channel(ECHO_ENDPOINT_PORT);
--echo::EchoService::Stub stub(&rpc_channel);
--EchoService_Stub::Echo1
----EchoRequest::descriptor
----nrpc::RpcChannel::CallMethod
------request->SerializeToArray
------sock.send(buf,msg_len,0);
------sock.recv(&buf, NN_MSG, 0);
------response->ParseFromString(buf);

4.protobuf
--1.EchoRequest
--2.EchoResponse
--3.EchoService//
	virtual void Echo1()
	virtual void Echo2()
	void CallMethod()//Echo1/Echo2Server
	
--4.class EchoService_Stub : public EchoService//client
	(1)void Echo1()
	--channel_->CallMethod
	(2)void Echo2()
	(3)::google::protobuf::RpcChannel* channel_;
--5.



5.

--1.class RpcChannel : public google::protobuf::RpcChannel
	CallMethod()
	nn::socket sock;
	
--2.class RpcServer 
		(1)socket server()//serverclientrequestservice->CallMethod()response
		(2)RegisterService()
		(3)Start()
--3.class EchoServiceImpl : public echo::EchoService //ServerEcho
		done->Run();

6.brpc
main of client
--google::protobuf::Closure* done = baidu::rpc::NewCallback(&HandleEchoResponse, cntl, response);//
--stub.Echo(cntl, &request, response, done);

main of server
--


7.multi-thread
client:
    if (!FLAGS_use_bthread) {
        for (int i = 0; i < FLAGS_thread_num; ++i) {
            if (pthread_create(&tids[i], NULL, sender, &channel) != 0) {
                LOG(ERROR) << "Fail to create pthread";
                return -1;
            }
        }
    } else {
        for (int i = 0; i < FLAGS_thread_num; ++i) {
            if (bthread_start_background(
                    &tids[i], NULL, sender, &channel) != 0) {
                LOG(ERROR) << "Fail to create bthread";
                return -1;
            }
        }
    }
    
server:

    



7.brpc in depth
Channel::CallMethod//client
--Controller::IssueRP


ControllerPrivateAccessor::OnResponse/OnServerStreamCreated::Run/SubDone::Run
--Controller::OnVersionedRPCReturned
----Controller::EndRPC
------_done->Run()


		
		
		
